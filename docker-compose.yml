version: '3.4'

services:
  backend:
    hostname: backend
    image: corpool-backend
    depends_on:
     - mongo-primary
     - rabbitmq
     - redis
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SUB_ENV=Docker
      - ASPNETCORE_URLS=http://+:80
      - Mongo__Host=mongo-primary
      - Mongo__Port=27017
      - Mongo__Username=root
      - Mongo__Password=root
      - Mongo__ReplicaSetName=replicaset
      - RabbitMq__HostName=rabbitmq
      - RabbitMq__Port=5672
      - RabbitMq__UserName=root
      - RabbitMq__Password=root
      - Redis__HostName=redis
      - Redis__Port=6379
  
  worker:
    scale: 1
    image: corpool-worker
    depends_on:
      - mongo-primary
      - rabbitmq
    build:
      context: .
      dockerfile: Worker/Dockerfile
    restart: always
    environment:
      - DOTNET_ENVIRONMENT=Development
      - SUB_ENV=Docker
      - Mongo__Host=mongo-primary
      - Mongo__Port=27017
      - Mongo__Username=root
      - Mongo__Password=root
      - Mongo__ReplicaSetName=replicaset
      - RabbitMq__HostName=rabbitmq
      - RabbitMq__Port=5672
      - RabbitMq__UserName=root
      - RabbitMq__Password=root
      - HealthCheck__Enabled=true
      - HealthCheck__FilePath=/tmp/health
  
  frontend_1:
    image: corpool-frontend
    depends_on:
      - backend
    build:
      context: frontend
      dockerfile: Dockerfile

  frontend_2:
    image: corpool-frontend
    depends_on:
      - backend
    build:
      context: frontend
      dockerfile: Dockerfile

  frontend_3:
    image: corpool-frontend
    depends_on:
      - backend
    build:
      context: frontend
      dockerfile: Dockerfile
    

  revproxy:
    image: nginx
    depends_on:
      - backend
      - frontend_1
      - frontend_2
      - frontend_3
    ports:
      - "${APP_LOCAL_PORT}:80"
    volumes:
      - "./reverseproxy:/etc/nginx/templates/"
    environment:
      - BACKEND_DOCKER_ADDRESS=backend:80
      - FRONTEND_1_DOCKER_ADDRESS=frontend_1:80
      - FRONTEND_2_DOCKER_ADDRESS=frontend_2:80
      - FRONTEND_3_DOCKER_ADDRESS=frontend_3:80
      - BACKEND_LOCAL_ADDRESS=${HOST_IP}:${BACKEND_LOCAL_PORT} # local dev environment
      - FRONTEND_LOCAL_ADDRESS=${HOST_IP}:${FRONTEND_LOCAL_PORT} # local dev environment

  # MongoDB replication set
  mongo-primary:
    image: 'bitnami/mongodb:latest'
    restart: always
    hostname: mongo-primary
    ports:
      - "${MONGO_LOCAL_PORT}:27017"
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongo-primary
      - MONGODB_REPLICA_SET_NAME=replicaset
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_USERNAME=root
      - MONGODB_PASSWORD=root
      - MONGODB_ROOT_PASSWORD=root
      - MONGODB_REPLICA_SET_KEY=corpoolreplica
    volumes:
      - mongo-data:/bitnami/mongodb
    
  mongo-secondary-1: # we can't make it scalable in develop since name resolving is not deterministic
    image: 'bitnami/mongodb:latest'
    restart: always
    depends_on:
      - mongo-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongo-secondary-1
      - MONGODB_REPLICA_SET_KEY=corpoolreplica
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_REPLICA_SET_NAME=replicaset
      - MONGODB_INITIAL_PRIMARY_HOST=mongo-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=root

  mongo-secondary-2: # we can't make it scalable in develop since name resolving is not deterministic
    image: 'bitnami/mongodb:latest'
    restart: always
    depends_on:
      - mongo-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongo-secondary-2
      - MONGODB_REPLICA_SET_KEY=corpoolreplica
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_REPLICA_SET_NAME=replicaset
      - MONGODB_INITIAL_PRIMARY_HOST=mongo-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=root

  # RabbitMQ
  rabbitmq:
    image: 'bitnami/rabbitmq:latest'
    restart: always
    hostname: rabbitmq
    ports:
      - "${RABBIT_LOCAL_PORT}:5672"
      - "${RABBIT_MANAGEMENT_LOCAL_PORT}:15672"
    environment:
      - RABBITMQ_USERNAME=root
      - RABBITMQ_PASSWORD=root
    volumes:
      - rabbitmq-data:/bitnami

  # Redis
  redis:
    image: 'bitnami/redis:latest'
    restart: always
    hostname: redis
    ports:
      - "${REDIS_LOCAL_PORT}:6379"
    environment:
      - REDIS_PASSWORD=root
    volumes:
      - redis-data:/bitnami/redis/data

volumes:
  mongo-data:
  rabbitmq-data:
  redis-data: